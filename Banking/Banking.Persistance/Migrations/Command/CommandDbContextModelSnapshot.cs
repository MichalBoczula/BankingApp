// <auto-generated />
using System;
using Banking.Persistance.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Banking.Persistance.Migrations.Command
{
    [DbContext(typeof(CommandDbContext))]
    partial class CommandDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Banking.Domain.Dictionaries.Tables.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Business"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Personal"
                        });
                });

            modelBuilder.Entity("Banking.Domain.Dictionaries.Tables.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IdCard"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Passport"
                        });
                });

            modelBuilder.Entity("Banking.Domain.Dictionaries.Tables.OperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OperationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BankingTransfer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AtmOperation"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BLIK"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CardPayment"
                        });
                });

            modelBuilder.Entity("Banking.Domain.Dictionaries.Tables.VerificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("VerificationStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Positive"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Negative"
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("FlatNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingNumber = "1",
                            City = "CityA",
                            CustomerId = 1,
                            FlatNumber = "101",
                            PostCode = "10001",
                            Street = "123 Main St",
                            VerificationStatus = 1
                        },
                        new
                        {
                            Id = 2,
                            BuildingNumber = "2",
                            City = "CityB",
                            CustomerId = 2,
                            FlatNumber = "202",
                            PostCode = "10002",
                            Street = "456 Elm St",
                            VerificationStatus = 1
                        },
                        new
                        {
                            Id = 3,
                            BuildingNumber = "3",
                            City = "CityC",
                            CustomerId = 3,
                            FlatNumber = "303",
                            PostCode = "10003",
                            Street = "789 Oak St",
                            VerificationStatus = 1
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.BankingAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("BankingAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountNumber = "ACC001",
                            AccountType = 2,
                            Balance = 1000.00m,
                            CustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            AccountNumber = "ACC002",
                            AccountType = 2,
                            Balance = 2000.00m,
                            CustomerId = 2
                        },
                        new
                        {
                            Id = 3,
                            AccountNumber = "ACC003",
                            AccountType = 2,
                            Balance = 3000.00m,
                            CustomerId = 3
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CustomerNumber")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PersonalDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerNumber = new Guid("d5212365-524a-430d-ac75-14a0983edf62"),
                            PersonalDataId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerNumber = new Guid("64652d35-1df7-4331-80ef-aef7d620e046"),
                            PersonalDataId = 2
                        },
                        new
                        {
                            Id = 3,
                            CustomerNumber = new Guid("7febeceb-6e20-4151-871b-d5324c0f735b"),
                            PersonalDataId = 3
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Emails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "customer1@example.com",
                            CustomerId = 1,
                            VerificationStatus = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "customer2@example.com",
                            CustomerId = 2,
                            VerificationStatus = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "customer3@example.com",
                            CustomerId = 3,
                            VerificationStatus = 1
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankingAccountId")
                        .HasColumnType("int");

                    b.Property<string>("FromAccount")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<string>("ToAccount")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BankingAccountId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Banking.Domain.Entities.PersonalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("PersonalData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            DateOfBirth = new DateTime(1985, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentType = 1,
                            FirstName = "John",
                            IdentityNumber = "1234567890",
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            DateOfBirth = new DateTime(1990, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentType = 2,
                            FirstName = "Jane",
                            IdentityNumber = "0987654321",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            DateOfBirth = new DateTime(1980, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentType = 1,
                            FirstName = "Alice",
                            IdentityNumber = "1122334455",
                            LastName = "Johnson"
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Phones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "+1",
                            CustomerId = 1,
                            Number = "123456789",
                            VerificationStatus = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "+1",
                            CustomerId = 2,
                            Number = "987654321",
                            VerificationStatus = 1
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "+1",
                            CustomerId = 3,
                            Number = "555666777",
                            VerificationStatus = 1
                        });
                });

            modelBuilder.Entity("Banking.Domain.Entities.Address", b =>
                {
                    b.HasOne("Banking.Domain.Entities.Customer", "CustomerRef")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerRef");
                });

            modelBuilder.Entity("Banking.Domain.Entities.BankingAccount", b =>
                {
                    b.HasOne("Banking.Domain.Entities.Customer", "CustomerRef")
                        .WithMany("BankingAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerRef");
                });

            modelBuilder.Entity("Banking.Domain.Entities.Email", b =>
                {
                    b.HasOne("Banking.Domain.Entities.Customer", "CustomerRef")
                        .WithMany("Emails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerRef");
                });

            modelBuilder.Entity("Banking.Domain.Entities.Operation", b =>
                {
                    b.HasOne("Banking.Domain.Entities.BankingAccount", "BankingAccountRef")
                        .WithMany("Operations")
                        .HasForeignKey("BankingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankingAccountRef");
                });

            modelBuilder.Entity("Banking.Domain.Entities.PersonalData", b =>
                {
                    b.HasOne("Banking.Domain.Entities.Customer", "CustomerRef")
                        .WithOne("PersonalDataRef")
                        .HasForeignKey("Banking.Domain.Entities.PersonalData", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerRef");
                });

            modelBuilder.Entity("Banking.Domain.Entities.Phone", b =>
                {
                    b.HasOne("Banking.Domain.Entities.Customer", "CustomerRef")
                        .WithMany("Phones")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerRef");
                });

            modelBuilder.Entity("Banking.Domain.Entities.BankingAccount", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("Banking.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BankingAccounts");

                    b.Navigation("Emails");

                    b.Navigation("PersonalDataRef")
                        .IsRequired();

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
